{{ define "agent.config.node-exporter" }}
// Node Exporter
discovery.relabel "node_exporter" {
  targets = discovery.kubernetes.pods.targets
{{- if (index .Values "prometheus-node-exporter").enabled }}
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance"]
    regex = "{{ .Release.Name }}"
    action = "keep"
  }
{{- end }}
  {{- range $k, $v := (index .Values.metrics "node-exporter").labelMatchers }}
  rule {
    source_labels = ["__meta_kubernetes_pod_label_{{ $k | replace "." "_" | replace "/" "_" }}"]
    regex = "{{ $v }}"
    action = "keep"
  }
  {{- end }}
  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    action = "replace"
    target_label = "instance"
  }
  rule {
    source_labels = ["__name__"]
    replacement   = {{ required ".Values.cluster.name is a required value. Please set it and try again." .Values.cluster.name | quote }}
    target_label  = "cluster"
  }
}

prometheus.scrape "node_exporter" {
  job_name   = "integrations/node_exporter"
{{- if (index .Values.metrics "node-exporter").service.isTLS }}
  scheme     = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    insecure_skip_verify = true
  }
{{- end }}
  {{- include "prometheus-collect" (dict "Values" .Values.metrics "Name" "node-exporter") | nindent 2 }}
}

prometheus.relabel "node_exporter" {
  {{- include "prometheus-relabel" (dict "Values" .Values.metrics "Name" "node-exporter") | nindent 2 }}
}
{{ end }}
